SET SEARCH_PATH TO Whispering_Journeys;



-- 01) List out the total registered customers in the Database.
SELECT COUNT(LOGIN_ID) FROM CUSTOMER;




-- 02) Select the customers that had lived in 4-star hotel.
SELECT C1.* FROM CUSTOMER AS C1 NATURAL JOIN HOTELS AS H1 WHERE H1.RATINGS=4.0;




-- 03) List out top 5 hotels having maximum Stayed_In customers.

SELECT H1.HOTEL_ID, H1.HOTEL_NAME, COUNT(LOGIN_ID) AS NO_OF_STAYED_IN FROM HOTELS 
AS H1 NATURAL JOIN CUSTOMER AS C1 GROUP BY HOTEL_ID ORDER BY NO_OF_STAYED_IN 
DESC LIMIT 3;  




-- 04) List out manager ID, Name of manager assigned to the hotel whose ratings are above 4.
SELECT MANAGER_id, NAME FROM MANAGER NATURAL JOIN HOTELS WHERE RATINGS>=4.0;
	



-- 05) List Hotel ID and Hotel Name having 4 or more hotel accessories.

SELECT H1.HOTEL_ID, H1.HOTEL_NAME, COUNT(H2.ACCESSORY) FROM HOTELS AS H1 NATURAL JOIN 
HOTEL_ACCESSORIES AS H2 GROUP BY H1.HOTEL_ID HAVING COUNT(H2.ACCESSORY)>10;




-- 06) List all the customers with contact details, email address and nationality.
SELECT NAME, NATIONALITY, CONTACT_NO,E_MAIL FROM CUSTOMER;



-- 07) Give the List of 10 nations whose count of contact No’s are maximum.
SELECT NATIONALITY, COUNT(CONTACT_NO) FROM CUSTOMER GROUP BY NATIONALITY ORDER BY COUNT(CONTACT_NO)
DESC  LIMIT 10;




-- 08) Calculate average rating given by each customer to each package.
SELECT PACKAGE_ID,ROUND(AVG(RATINGS),1) AS AVERAGE_RATINGS FROM REGISTERED_IN GROUP BY PACKAGE_ID;




-- 09) Give the manager name and manager_ID which are assigned to Motels in which hotel type and room type is ‘superior’.

SELECT M1.MANAGER_ID, M1.NAME FROM MANAGER AS M1
NATURAL JOIN HOTELS AS H1 
NATURAL JOIN ROOMS AS R1
WHERE R1.ROOM_TYPE='superior' AND H1.HOTEL_TYPE='Motels';




-- 10) Calculate maximum total revenue generated by each hotel and also show in which hotel type.

SELECT H1.HOTEL_NAME,h1.HOTEL_TYPE,
MAX(H1.AVAILABLE_ROOMS*((H2.PRICE_PER_ADULT* H2.MAX_CAPACITY)+(H2.PRICE_PER_CHILD* H2.MAX_CAPACITY))) 
AS TOTAL_REVENUE
FROM HOTELS AS H1 
NATURAL JOIN ROOMS AS H2 GROUP BY H1.HOTEL_ID;




-- 11) List rooms whose price_per_child is less than 50 percent of price_per_Adult.
SELECT * FROM Rooms
WHERE Price_Per_Child < Price_Per_Adult * 0.5;




-- 12) List Login_ID’s and customer name that had category type = 'Adventure Trip'.

SELECT DISTINCT c.Login_ID, c.Name
FROM Customer as c
JOIN Travel_Companions as tc ON c.Login_ID = tc.Login_ID
JOIN Registered_IN as r ON c.Login_ID = r.Login_ID
JOIN Pre_Packages as pp ON r.Package_ID = pp.Package_ID
JOIN Attractions as a ON pp.Package_ID = a.Package_ID
NATURAL JOIN Place_details as at WHERE at.Category = 'Adventure Trip';




-- 13) List top 3 package details which contains maximum number of registrations.

SELECT pp.Package_ID, pp.Package_Name, COUNT(ri.Registration_ID) AS Registration_Count
FROM Pre_Packages AS pp
JOIN Registered_IN AS ri ON pp.Package_ID = ri.Package_ID
GROUP BY pp.Package_ID, pp.Package_Name
ORDER BY Registration_Count DESC
LIMIT 3;




-- 14) Give package name and maximum price for packages whose duration is 2am-10pm and season is summer.

SELECT pp.Package_Name, MAX(pp.Package_Price) AS Max_Price
FROM Pre_Packages AS pp
JOIN Attractions AS a ON pp.Package_ID = a.Package_ID
WHERE a.Opening_Time >= '2:00:00' AND a.Closing_Time <= '22:00:00' AND a.Season = 'Summer'
GROUP BY pp.Package_Name;




-- 15) count the number of negative and positive review status for each package.

SELECT 
    pp.Package_ID,
    pp.Package_Name,
    COALESCE(SUM(CASE WHEN ri.Review_status = 'Positive' THEN 1 ELSE 0 END), 0) AS Positive_Reviews,
    COALESCE(SUM(CASE WHEN ri.Review_status = 'Negative' THEN 1 ELSE 0 END), 0) AS Negative_Reviews
FROM 
    Pre_Packages pp
LEFT JOIN 
    Registered_IN ri ON pp.Package_ID = ri.Package_ID
GROUP BY 
    pp.Package_ID, pp.Package_Name;




-- 16) Identify customer_ID’s who had travelled with companions but never booked a package.

SELECT DISTINCT tc.Login_ID
FROM Travel_Companions AS tc
LEFT JOIN Registered_IN AS ri ON tc.Login_ID = ri.Login_ID
WHERE ri.Package_ID IS NULL;




-- 17) Give out package_ID’s, package_name and maximum package_price for each category.

SELECT 
    pp.Package_ID,
    pp.Package_Name,
    pp.Package_Price,
    pd.Category
FROM 
    Pre_Packages AS pp
JOIN 
    Attractions AS  a ON pp.Package_ID = a.Package_ID
JOIN 
    Place_Details pd ON a.Place = pd.Place
                    AND a.City = pd.City
                    AND a.State = pd.State
                    AND a.Country = pd.Country
                    AND a.Season = pd.Season
                    AND a.Opening_Time = pd.Opening_Time
                    AND a.Closing_Time = pd.Closing_Time
GROUP BY 
    pp.Package_ID, pp.Package_Name, pp.Package_Price, pd.Category;

-- 18) Give names of airline company and number of passengers who travel with duration of less or equal to 6 hours.
SELECT 
    fd.Airlines_Company,
    COUNT(*) AS Passengers_Traveled
FROM 
    Flight_Details AS fd
JOIN 
    Transportation AS t ON fd.Flight_ID = t.Transportation_ID
WHERE 
    
    EXTRACT(EPOCH FROM (t.Return_Time - t.Departure_Time)) <= 1*3600
GROUP BY 
    fd.Airlines_Company
ORDER BY COUNT(*) DESC LIMIT 10;




-- 19) Give six longest duration train details.

select train_id, location_from, location_to, departure_time, departure_date
from transportation join train_details on transportation_id = train_id
order by (return_time - departure_time) desc limit 6;




-- 20) Give the cheapest car details for 9 cars.

select cd.car_id, cd.car_brand, cc.car_class_type, cc.car_class_price
from transportation as t join car_details as cd on t.transportation_id = cd.car_id
natural join car_class_price as cc order by cc.car_class_price asc limit 9;




-- 21) Give all of the transportation options for going from Jaipur to Drakensberg.

select transportation_id, departure_date, departure_time, return_date, return_time
from transportation where location_from = 'Jaipur' and location_to ='Drakensberg';




-- 22) Give all details of all flight available of the indigo Airlines.

select flight_id, airlines_company
from transportation join flight_details on transportation_id = flight_id 
where airlines_company ='Indigo';




-- 23) List down Top 5 cheapest flight with Economy class.

select fd.flight_id, fc.flight_class_price 
from transportation as t join flight_details as fd on t.transportation_id = fd.flight_id 
natural join flight_class_price as fc
where fc.flight_class_type = 'Economy' order by fc.flight_class_price asc limit 5;;




-- 24) Give all available buses whose starting point is Lucknow.

select bus_id, bus_company, location_from, location_to, departure_time, departure_date 
from transportation join bus_details on transportation_id = bus_id 
where location_from = 'Lucknow';




-- 25) Give the detail of top 5 expensive buses.

select bd.bus_id, bc.bus_class_price, bc.bus_class_type
from transportation as t join bus_details as bd on t.transportation_id = bd.bus_id natural join bus_class_price as bc
order by bc.bus_class_price desc limit 5;




-- 26) Give places which has Beaches and are outside of the India.

select place, city, state, country, season
from attractions natural join place_details
where country != 'India' and category = 'Beaches';




-- 27) Give the count of flight for the given date and given place.

SELECT t.Departure_Date, t.location_to, count(fd.flight_id)
FROM Transportation as t
JOIN Flight_Details fd ON t.Transportation_ID = fd.Flight_ID
natural JOIN Flight_Class_Price fcp
GROUP BY t.Departure_Date, t.location_to;




-- 28) Give Class-wise price for buses of the HRTC (Himachal Road Transport Corporation).

select bd.bus_id, bc.bus_class_price, bc.bus_class_type
from transportation as t join bus_details as bd on t.transportation_id = bd.bus_id natural join bus_class_price as bc
where bd.bus_company = 'HRTC (Himachal Road Transport Corporation)';




-- 29) Find the customers who have stayed in a hotel along with their companion's details.

SELECT c.Name AS Customer_Name, c.DOB AS Customer_DOB, c.Gender AS Customer_Gender, 
       tc.Companion_Name, tc.DOB AS Companion_DOB, tc.Gender AS Companion_Gender, 
       s.Hotel_ID, s.Room_No
FROM Customer AS c
JOIN Travel_Companions AS tc ON c.Login_ID = tc.Login_ID
JOIN Stayed_IN AS s ON c.Login_ID = s.Login_ID AND tc.Companion_Name = s.Companion_Name;

-- 30) Retrieve the Top 5 attractions based on customer’s ratings.
SELECT a.Place, a.City, a.State, a.Country, a.Season, a.Opening_Time, a.Closing_Time, 
       ROUND(AVG(ri.Ratings),1) AS Average_Rating
FROM Attractions AS a
JOIN Registered_IN AS ri ON a.Package_ID = ri.Package_ID
GROUP BY a.Place, a.City, a.State, a.Country, a.Season, a.Opening_Time, a.Closing_Time
ORDER BY Average_Rating DESC
LIMIT 5;




--31) Give Total bookings of each transportation type.

SELECT 
    CASE 
        WHEN LEFT(t.Transportation_ID, 1) = 'F' THEN 'Flight'
        WHEN LEFT(t.Transportation_ID, 1) = 'B' THEN 'Bus'
        WHEN LEFT(t.Transportation_ID, 1) = 'T' THEN 'Train'
        WHEN LEFT(t.Transportation_ID, 1) = 'C' THEN 'Car'
       
    END AS Transportation_Type,
    COUNT(r.Package_ID) AS Total_Bookings
FROM 
    Transportation t
LEFT JOIN 
    Pre_Packages p ON t.Transportation_ID = p.Transportation_ID
LEFT JOIN 
    Registered_IN r ON p.Package_ID = r.Package_ID
GROUP BY 
    LEFT(t.Transportation_ID, 1)
ORDER BY 
    Total_Bookings DESC;

